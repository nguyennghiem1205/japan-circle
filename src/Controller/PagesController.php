<?php
/**
 * CakePHP(tm) : Rapid Development Framework (http://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (http://cakefoundation.org)
 * @link      http://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Cache\Cache;
use Cake\Routing\Router;
use Cake\Utility\Security;
use Cake\Core\Configure;
use Cake\Event\Event;
use Cake\I18n\I18n;
use Cake\Network\Exception\NotFoundException;
use Cake\View\Exception\MissingTemplateException;
use Cake\View\View;
use Core;

/**
 * Static content controller
 *
 * This controller will render views from Template/Pages/
 *
 * @property null layout
 * @property bool|object HomeMenus
 * @property bool|object Productions
 * @property bool|object JcApiModel
 * @property bool|object EmailStacks
 * @link http://book.cakephp.org/3.0/en/controllers/pages-controller.html
 */
class PagesController extends AppController
{

    public $titleLayout = null;
    public $descriptionMeta = null;
    public $keywordsMeta = null;

    public $sidebarLeft = true;
    public $sidebarRight = true;

    public $mnMem=array();

    public $slideTop = false;

    public $helpers = [
        'Paginator'
    ];


    /**
     *Initialize
     */
    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->loadModel('Advertisements');
        $this->loadModel('News');
        $this->loadModel('Banners');
        $this->loadModel('NewsCategories');
        $this->loadModel('Inquiries');
        $this->loadModel('Activities');
        $this->loadModel('Contacts');
        $this->loadModel('Settings');
        $this->loadModel('Members');
        $this->loadModel('HomeMenus');
        $this->loadModel('TypeCompanies');
        $this->loadModel('TypeBusiness');
        $this->loadModel('Productions');
        $this->loadModel('CompanyInquiries');
        $this->loadModel('RegisterInquiries');
        $this->loadModel('EmailStacks');
        $this->loadModel('Members');
        $this->loadModel('Events');
        $this->loadModel('Supporters');
        $this->loadModel('CategorySupporters');
        $this->loadModel('SupporterCities');
    }

    /**
     * Called before the controller action. You can use this method to configure and customize components
     * or perform logic that needs to happen before each controller action.
     *
     * @param Event $event An Event instance
     * @return void
     * @link http://book.cakephp.org/3.0/en/controllers.html#request-life-cycle-callbacks
     */
    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        if ($this->request->action == 'change_language') {
            return true;
        }
        $this->getSettings();
        $this->getMenus();
    }

    /**
     * get settings
     */
    public function getSettings()
    {

        $settings = Cache::read('settingsFrontend');
        if (!$settings) {
            $settings = $this->Settings->find()->first();
            if ($settings) {
                $settings = $settings->toArray();
            }
            Cache::write('settingsFrontend', $settings);
        }
        $this->set(compact('settings'));
    }

    /**
     * listMember
     */
    public function listMember($code, $page = 1, $limit = 12)
    {
        $subCode = $this->request->query('sub');
        $this->sidebarRight = false;
        $industries = $this->JcApiModel->getListData('industries');
        $listIndustries = array();
        $nameIndustry = null;
        foreach ($industries as $industry) {
            if($industry['Industry']['parent_id'] == $code) {
                $listIndustries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
            if ($industry['Industry']['code'] == $code) {
                $nameIndustry = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $codeGetMember = $subCode?$subCode:$code;
        $this->set(compact('codeGetMember', 'nameIndustry'));
        $listMemberAPI = $this->JcApiModel->getMembersByIndustry($codeGetMember, $page, $limit, MEMBER_COMPANY_COUNTRY_VIETNAM);
        $listMembers = array();
        if($listMemberAPI) {
            $listMembers = $listMemberAPI;
            $count = (int)$listMembers['CountMembers'];
            $pageMax =ceil($count / $limit);
        }
        $listMemberIds = array();
        $members = array();
        if($listMembers) {
            foreach($listMembers as $member) {
                $listMemberIds[] = $member['Member']['id'];;
                $members[$member['Member']['id']]= $member;
            }
        }
        $membersClients = $this->Members->find('all',[
            'conditions' => ['id in' => $listMemberIds, 'com_status' => STATUS_APPROVED],
            'contain' => ['Productions' => ['conditions' => ['status' => STATUS_APPROVED],'fields' => ['Productions.id', 'Productions.member_id','Productions.image','Productions.name']],'CompanyInquiries' => ['conditions' => ['status' => STATUS_APPROVED],'fields' => ['CompanyInquiries.id', 'CompanyInquiries.member_id','CompanyInquiries.image','CompanyInquiries.title']]],
            'fields' => ['Members.id','Members.com_name_eng','Members.com_name_jpn','Members.com_lang_chosen', 'Members.com_business_vie',
                        'Members.com_business_jpn','Members.com_business_eng','Members.address_vie','Members.address_eng','Members.address_jpn',
                        'Members.image',
                    ]
        ]);
        if($membersClients) {
            $membersClients = $membersClients->toArray();
        } else {
            $membersClients = array();
        }
        $this->set(compact('listIndustries','members','membersClients','pageMax', 'page', 'code', 'subCode'));
        $this->titleLayout = __('List of member by industry');
    }

    /**
     * home page
     */
    public function index()
    {
        $this->slideTop = true;
        //get Inquiries
        $this->loadModel('TopListInquiries');
        $topInquiries=$this->TopListInquiries->find('all',[
            'conditions' => [
                'status' => STATUS_APPROVED
            ],
            'limit'=>10]);
        if ($topInquiries) {
            $topInquiries = $topInquiries->toArray();
        }
        $this->set('topInquiries',$topInquiries);
        $code = $this->request->query('code');
        $this->set(compact('code', 'newsHome'));
        $search = $this->request->query('q');

        $conditions = [
            'status' => INQUIRY_SHOW
        ];
        $limit = 4;
        if ($search) {
            $conditions['OR'] = [
                [
                    'title_vie LIKE' => '%'.$search.'%'
                ],
                [
                    'title_eng LIKE' => '%'.$search.'%'
                ],
                [
                    'title_jpn LIKE' => '%'.$search.'%'
                ]
            ];
            $limit = 12;
        } else {
            $conditions['home_page'] = true;
        }
        $Inquiries=$this->Inquiries->find('all',[
            'conditions' => $conditions,
            'order'=>[
                'created'=>'DESC'
            ],
            'limit'=>$limit]);
        $this->set('Inquiries',$Inquiries);
        $this->set('search',$search);
        if ($search) {
            $this->render('search_page');
        }
        if ($code == 404) {
            $this->render('index_404');
        }

        $newsHome = $this->News->find('all', [
            'conditions' => [
                'status' => STATUS_APPROVED,
                'home_page' => true
            ]
        ])->toArray();

        //get Activities
        $Activities=$this->Activities->find('all',['order'=>['created'=>'DESC'],'conditions' => ['home_page' => true],'limit'=>4]);
        $this->set('Activities',$Activities);

        //get member Japan
        $memberJapans = $this->Members->find('list',[
            'conditions' => [
                'com_country' => MEMBER_COMPANY_COUNTRY_JAPAN,
                'com_status' => STATUS_APPROVED
            ],
            'valueField' => 'id',
            'order' => ['created' => 'desc'],
            'limit' => 10
        ])->toArray();
        $memberApi = $this->JcApiModel->getListData('members',1, 1000, $memberJapans);
        $listIndustries = $this->JcApiModel->getList('industries');
        $this->set(compact('newsHome', 'memberApi', 'listIndustries'));
        $this->getComments();
        $this->titleLayout = __('Trang chủ');
    }

    /**
     * about page
     */
    public function about() {
        $this->layout = false;
        $bannersActivities = $this->Banners->find('all', [
            'conditions' => [
                'position' => BANNER_POSITION_ACTIVITY,
                'status' => STATUS_APPROVED
            ],
            'order' => [
                'created' => 'desc'
            ],
            'limit' => 30
        ])->toArray();
        $bannersMembers = $this->Banners->find('all', [
            'conditions' => [
                'position' => BANNER_POSITION_MEMBER,
                'status' => STATUS_APPROVED
            ],
            'order' => [
                'created' => 'desc'
            ],
            'limit' => 10
        ])->toArray();
        $this->set(compact('bannersMembers', 'bannersActivities'));
        $this->titleLayout = __('Giới thiệu');
    }

    /**
     * contact page
     */
    public function contact($register = false) {
        if($register){
            $this->render('message');
        } else {
            $thank=null;
            $contact = $this->Contacts->newEntity();
            if ($this->request->is('post')) {
                $contact = $this->Contacts->patchEntity($contact, $this->request->data);
                if ($this->Contacts->save($contact)) {
                    $this->Flash->success(__('Thank you for contact.'));
                    $thank='<div style="height: 50px; border: 1px solid green; padding: 15px; color: green;">'.__('Gửi liên hệ thành công. Xin cảm ơn!').'</div>';
                } else {
                    $thank='<div style="height: 50px; border: 1px solid green; padding: 15px; color: red;">'.__('Đã có lỗi xảy ra! Vui lòng điền đầy đủ thông tin hoặc có thể bạn đã gửi liên hệ trước đó. Xin cảm ơn!').'</div>';
                    $this->Flash->error(__('The contact could not be sent. Please, try again.'));
                }
            }
            $this->set(compact('thank'));
            $this->set(compact('contact'));
            $this->set('_serialize', ['contact']);
        }
        $this->titleLayout = __('Liên hệ');
    }

    /**
     * members
     */
    public function members() {

    }

    /**
     * page view
     * @param $pageId
     */
    public function pageView($pageId)
    {
        $this->loadModel('Pages');
        $page = $this->Pages->find()->where(['id' => $pageId])->first();
        if (!$page) {
            throw new NotFoundException();
        }
        $page = $page->toArray();
        $this->set(compact('page'));
        if ($page['code'] == 'contact') {
            $thank=null;
            $contact = $this->Contacts->newEntity();
            if ($this->request->is('post')) {
                $contact = $this->Contacts->patchEntity($contact, $this->request->data);
                if ($this->Contacts->save($contact)) {
                    $this->Flash->success(__('Thank you for contact.'));
                    $thank='<div style="height: 50px; border: 1px solid green; padding: 15px; color: green;">'.__('Gửi liên hệ thành công. Xin cảm ơn!').'</div>';
                } else {
                    $thank='<div style="height: 50px; border: 1px solid green; padding: 15px; color: red;">'.__('Đã có lỗi xảy ra! Vui lòng điền đầy đủ thông tin hoặc có thể bạn đã gửi liên hệ trước đó. Xin cảm ơn!').'</div>';
                    $this->Flash->error(__('The contact could not be sent. Please, try again.'));
                }
            }
            $this->set(compact('thank'));
            $this->set(compact('contact'));
            $this->set('_serialize', ['contact']);

            $this->render('contact');
        }

    }

    /**
     * cooperation
     */
    public function cooperations() {
        $this->paginate = [
            'Inquiries' => [
                'conditions' => [
                    'status IN' => [INQUIRY_SHOW,INQUIRY_PARTNER]
                ],
                'order' => [
                    'created' => 'desc'
                ],
                'limit' => 12
            ]
        ];
        $this->set('data', $this->paginate($this->Inquiries));
        $this->set('cooperation', true);

        $this->titleLayout = __('Cooperation');
    }

    public function addProduct($id = null)
    {
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null) {
            return $this->redirect('/');
        }
        $this->sidebarRight =  false;
        $this->sidebarLeft = false;
        $production = $this->Productions->newEntity();
        if ($id) {
            $production = $this->Productions->get($id);
        }

        if ($this->request->is(['post', 'put', 'patch'])) {
            $production = $this->Core->patchEntity($production, $this->request->data, 'Productions');
            $production->member_id = $this->request->session()->read('Member.id');
            if ($this->Productions->save($production)) {
                $this->Flash->success(__('The production has been saved.'));
                return $this->redirect(['controller' => 'Pages', 'action' => 'memberProduct']);
            } else {
                $this->Flash->error(__('The production could not be saved. Please, try again.'));
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $this->imageFields = $production->imageFields;

        $this->set(compact('production', 'industries'));
        $this->set('_serialize', ['production']);
        $this->titleLayout = __('Thêm sản phẩm');
    }
    /**
     * member's inquiries
     */
    public function memberInquiries($page = 1){
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null){
            return $this->redirect('/');
        }

        $this->loadModel('CompanyInquiries');
        $inquiries = $this->CompanyInquiries->find('all', [
            'conditions' => [
                'member_id' => $dataMember->id
            ],
            'order' => [
                'created' => 'desc'
            ],
            'limit' => 10,
            'page' => $page
        ]);
        $totalInquiries = $this->CompanyInquiries->find()->where(['member_id' => $dataMember->id])->count();
        $pageMax =ceil($totalInquiries / 10);
        $this->set(compact('inquiries','page','pageMax','totalInquiries'));
        $this->titleLayout = __('Cơ hội hợp tác');

    }
    public function editInquiry($id=null)
    {
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null){
            return $this->redirect('/');
        }
        $this->sidebarRight =  false;
        $this->sidebarLeft = false;
        $industries = $this->JcApiModel->getList('industries');
        $type=Configure::read('CompanyInquiry.type');
        $companyInquiry = $this->CompanyInquiries->get($id, ['contain' => []]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $companyInquiry = $this->CompanyInquiries->patchEntity($companyInquiry, $this->request->data);
            if ($this->CompanyInquiries->save($companyInquiry)) {
                $this->Flash->success(__('The company inquiry has been saved.'));
                return $this->redirect(['action' => 'memberInquiries']);
            } else {
                $this->Flash->error(__('The company inquiry could not be saved. Please, try again.'));
            }
        }
        $members = $this->CompanyInquiries->Members->find('list', ['limit' => 200]);
        $this->set(compact('companyInquiry', 'members','industries','type'));
        $this->set('_serialize', ['companyInquiry']);
        $this->titleLayout = __('Chỉnh sửa cơ hội hợp tác');
    }
    public function addInquiry($id = null)
    {
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null) {
            return $this->redirect('/');
        }
        $this->sidebarRight =  false;
        $this->sidebarLeft = false;
        $company_inquiries = $this->CompanyInquiries->newEntity();
        if ($id) {
            $company_inquiries = $this->CompanyInquiries->get($id);
        }

        if ($this->request->is(['post', 'put', 'patch'])) {
            $company_inquiries = $this->Core->patchEntity($company_inquiries, $this->request->data, 'CompanyInquiries');
            $company_inquiries->member_id = $this->request->session()->read('Member.id');
            $company_inquiries->status = STATUS_UNAPPROVED;
            if ($this->CompanyInquiries->save($company_inquiries)) {
                $this->Flash->success(__('The production has been saved.'));
                return $this->redirect(['controller' => 'Pages', 'action' => 'memberInquiries']);
            } else {
                $this->Flash->error(__('The production could not be saved. Please, try again.'));
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $this->imageFields = $company_inquiries->imageFields;

        $this->set(compact('company_inquiries', 'industries'));
        $this->set('_serialize', ['company_inquiries']);
        $this->titleLayout = __('Thêm mới cơ hội hợp tác');
    }

    public function companyInquiryIndex($id) {
        $inquiry = $this->CompanyInquiries->find()->where([
            'id' => $id,
        ])->first();
        if (!$inquiry) {
            throw new NotFoundException();
        }
        $this->set(compact('inquiry'));

        $others = $this->CompanyInquiries->find('all', [
            'conditions' => [
                'id !=' => $id,
                'status' => STATUS_APPROVED
            ],
            'order' => [
                'order' => 'asc',
                'created' => 'desc'
            ],
            'limit' => 10
        ])->toArray();
        $this->set(compact('others'));

        $this->titleLayout = __('Detail Inquiry');
    }
    public function inquiryIndex($id)
    {
        $inquiry = $this->Inquiries->find()->where(['id' => $id])->first()->toArray();
        if (!$inquiry) {
            throw new NotFoundException();
        }
        $this->set(compact('inquiry'));

        $others = $this->Inquiries->find('all', [
            'conditions' => [
                'id !=' => $id,
                'status' => true
            ],
            'order' => [
                'order' => 'asc',
                'date_start' => 'desc'
            ],
            'limit' => 10
        ])->toArray();
        $this->set(compact('others'));
        $this->titleLayout = $inquiry['title_'.$this->fieldLanguage];
    }
    public function deleteInquiry($id=null) {
        //$this->request->allowMethod(['post']);
        $companyInquiry = $this->CompanyInquiries->get($id);
        if ($this->CompanyInquiries->delete($companyInquiry)) {
            @unlink(PATH_IMAGE_FILE.'CompanyInquiries'.DS.$companyInquiry->image);
            $this->Flash->success(__('The company inquiry has been deleted.'));
        } else {
            $this->Flash->error(__('The company inquiry could not be deleted. Please, try again.'));
        }
        return $this->redirect(['action' => 'memberInquiries']);
    }
    public function activityIndex($id=null){

        $activity = $this->Activities->find()->where(['id' => $id])->first()->toArray();
        if (!$activity) {
            throw new NotFoundException();
        }
        $this->set(compact('activity'));

        $others = $this->Activities->find('all', [
            'conditions' => [
                'id !=' => $id,
                'status' => 1
            ],
            'order' => [
                'order' => 'asc',
                'created' => 'desc'
            ],
            'limit' => 10
        ])->toArray();
        $this->set(compact('others'));

        $this->titleLayout = $activity['name_'.$this->fieldLanguage];
    }

    public function newsIndex($id) {
        $news = $this->News->find()->where([
                'status' => true,
                'id' => $id
            ])->first();
        if (!$news) {
            throw new NotFoundException();
        }
        $news = $news->toArray();

        $otherNews = $this->News->find('all', [
            'conditions' => [
                'status' => true,
                'id !=' => $id,
                'news_category_id' => $news['news_category_id'],
            ],
            'limit' => 10,
            'order' => [
                'created' => 'desc'
            ],
            'fields' => ['id', 'name_vie', 'name_eng', 'name_jpn', 'image']
        ]);
        if ($otherNews) {
            $otherNews = $otherNews->toArray();
        } else {
            $otherNews = array();
        }
        $this->set(compact('news', 'otherNews'));
        $this->titleLayout = $news['name_'.$this->fieldLanguage];
        $this->descriptionMeta = $news['news_meta_desc'];
        $this->keywordsMeta = $news['news_meta_keyword'];

        $ent = $this->News->get($news['id']);
        $ent->total_view = (int)$news['total_view'] + 1;
        $this->News->save($ent);

    }

    /**
     * before render view
     * @param Event $event
     */
    public function beforeRender(Event $event)
    {
        parent::beforeRender($event); // TODO: Change the autogenerated stub
        $this->set([
            'titleLayout' => $this->titleLayout,
            'metaDescription' => $this->descriptionMeta,
            'metaKeywords' => $this->keywordsMeta,
            'sidebarLeft' => $this->sidebarLeft,
            'sidebarRight' => $this->sidebarRight,
            'fieldLanguage' => $this->fieldLanguage
        ]);
        $this->getAdvertisements();
        $this->getBanners();
        $leftIndustries = $this->JcApiModel->getListData('industries', 0, 20, array(), MEMBER_COMPANY_COUNTRY_VIETNAM);
        if ($this->sidebarLeft) {
            $this->set('leftIndustries', $leftIndustries);
        }

        if($this->sidebarRight) {
            $listEvents = $this->Activities->find('all',['conditions' => ['sidebar_right' => true],'order' => 'modified DESC','limit' => 2]);
            $listMagazines = $this->Events->find('all',['order' => 'modified DESC','limit' => 2]);
            if($listEvents) $listEvents = $listEvents->toArray();
            if($listMagazines)  $listMagazines = $listMagazines->toArray();
            $this->set('listEvents',$listEvents);
            $this->set('listMagazines',$listMagazines);
        }
    }

    /**
     * get comments
     */
    public function getComments() {
        $this->loadModel('Comments');
        $comments = $this->Comments->find('all', [
            'conditions' => [
                'active' => true
            ],
            'order' => [
                'order' => 'asc',
                'date' => 'desc'
            ],
            'limit' => 4
        ]);
        $this->set(compact('comments'));
    }

    /**
     * get banners for layout
     */
    public function getBanners()
    {
        $conditions = [
            'status' => true,
            'position' => BANNER_POSITION_BOTTOM
        ];
        if ($this->slideTop) {
            unset($conditions['position']);
            $conditions[] = 'position IN ('.implode(',', [BANNER_POSITION_BOTTOM, BANNER_POSITION_TOP]).')';
        }

        $banners =  $this->Banners->find('all', [
            'conditions' => $conditions
        ])->toArray();
        $this->set(compact('banners'));
    }

    /**
     * get advertisements
     */
    public function getAdvertisements() {

        $typesAdvertisements = [];
        if ($this->sidebarLeft) {
            $typesAdvertisements[] = ADV_POSITION_LEFT;
        }
        if ($this->sidebarRight) {
            $typesAdvertisements[] = ADV_POSITION_RIGHT;
        }
        if ($typesAdvertisements) {
            $advertisements = $this->Advertisements->getAdvertisementsByPosition($typesAdvertisements);
            $this->set(compact('advertisements'));
        }
    }

    /**
     * change language
     * @param $lang
     */
    public function change_language($lang)
    {
        $this->request->session()->write('Config.language', $lang);
        I18n::locale($lang);
        $this->Cookie->write('language',$lang);
        Configure::load('constant', 'default', false);
        $this->redirect($this->referer());
    }

    /**
     * news category
     * @param $id
     */
    public function newsCategory($id) {
        $newsCategory = $this->NewsCategories->find()->where([
            'status' => true,
            'id' => $id
        ])->first();
        if (!$newsCategory) {
            throw new NotFoundException();
        }
        $newsCategory = $newsCategory->toArray();
        $this->set(compact('newsCategory'));

        $this->paginate = [
            'News' => [
                'conditions' => [
                    'news_category_id' => $id,
                    'status' => true,
                ],
                'limit' => 12,
                'order' => [
                    'created' => 'desc'
                ],
            ]
        ];
        $this->set('data', $this->paginate($this->News));

        $this->titleLayout = $newsCategory['name_'.$this->fieldLanguage];
        $this->render('cooperations');
    }

    public function activities()
    {
        $this->paginate = [
            'Activities' => [
                'conditions' => [
                    'status' => 1,
                ],
                'order' => [
                    'created' => 'desc'
                ],
                'limit' => 12
            ]
        ];
        $this->set('data', $this->paginate($this->Activities));
        $this->set('activities', true);

        $this->titleLayout = __('Activities');
    }

    /**
     * get menus home page
     */
    public function getMenus() {
        $menuParents = Cache::read('menuParents');
        $subMenu = Cache::read('subMenu');
        if (!$menuParents && !$subMenu) {
            $allMenus = $this->HomeMenus->find('all', [
                'conditions' => [
                    'HomeMenus.status' => true
                ],
                'join' => [
                    'Pages' => [
                        'table' => 'pages',
                        'alias' => 'Pages',
                        'type' => 'LEFT',
                        'conditions' => [
                            'HomeMenus.type' => HOME_MENU_TYPE_PAGE,
                            'Pages.id = HomeMenus.child_id'
                        ]
                    ],
                    'NewsCategories' => [
                        'table' => 'news_categories',
                        'alias' => 'NewsCategories',
                        'type' => 'LEFT',
                        'conditions' => [
                            'HomeMenus.type' => HOME_MENU_TYPE_NEWS,
                            'NewsCategories.id = HomeMenus.child_id'
                        ]
                    ],
                ],
                'fields' => [
                    'Pages.id', 'Pages.title', 'NewsCategories.id', 'NewsCategories.name_vie', 'NewsCategories.name_eng', 'NewsCategories.name_jpn',
                    'HomeMenus.id', 'HomeMenus.name_vie', 'HomeMenus.name_jpn', 'HomeMenus.name_eng', 'HomeMenus.parent_id', 'HomeMenus.type', 'HomeMenus.child_id'
                ]
            ]);
            $menuParents = $subMenu = [];
            foreach ($allMenus->toArray() as $item) {
                $item['url'] = $this->buildUrlMenu($item);
                if ($item['parent_id'] == null) {
                    $menuParents[] = $item;
                } else {
                    $subMenu[$item['parent_id']][] = $item;
                }
            }
            Cache::write('menuParents', $menuParents);
            Cache::write('subMenu', $subMenu);
        }

        $this->set(compact('menuParents', 'subMenu'));
    }

    /**
     * generate url menu
     * @param $item
     * @return string
     */
    public function buildUrlMenu($item) {
        $url = '#';
        switch ($item['type']) {
            case HOME_MENU_TYPE_INTRODUCE;
                $url = Router::url(['controller' => 'Pages', 'action' => 'about']);
                break;
            case HOME_MENU_TYPE_PAGE:
                $url = Core::generateUrl('pageView', [
                    'name' => $item['Pages']['title'],
                    'id' => $item['Pages']['id']
                ]);
                break;
            case HOME_MENU_TYPE_NEWS:
                $url = Core::generateUrl('newsCategory', [
                    'name' => $item['NewsCategories']['name_'.$this->fieldLanguage],
                    'id' => $item['NewsCategories']['id']
                ]);
                break;
            case HOME_MENU_TYPE_INQUIRY:
                $url = Router::url(['controller' => 'Pages', 'action' => 'cooperations']);
                break;
            case HOME_MENU_TYPE_MEMBER:
                if ($item['child_id']) {
                    $url = Router::url(['controller' => 'Pages', 'action' => 'listMemberByCountries', $item['child_id']]);
                }
                break;
            case HOME_MENU_TYPE_ACTIVITY:
                $url = Router::url(['controller' => 'Pages', 'action' => 'activities']);
                break;
            case HOME_MENU_TYPE_SUPPORTER_REGISTER:
                $url = Router::url(['controller' => 'Pages', 'action' => 'registerSupporter']);
                break;
            case HOME_MENU_TYPE_SUPPORTER:
                $url = Router::url(['controller' => 'Pages', 'action' => 'listSupporters']);
                break;
        }
        return $url;
    }
    /**
     * member login
     */
    public function memberLogin() {
        $err='';
        if ($this->request->is('post')) {
            $email = $this->request->data['email'];
            $password = Security::hash($this->request->data['password'], 'sha1', true);
            $mem = $this->jcApi->checkLogin($email);

            if($mem) {
                $memDetail = $this->jcApi->getMember($mem['Member']['id']);

                $this->request->session()->write('memberDetail', $memDetail);
                $idMem = $mem['Member']['id'];
                $mem = $this->Members->find()->where(['id' => $idMem, 'password' => $password, 'com_status' => STATUS_APPROVED])->first();
                if ($mem) {
                    $this->request->session()->write('Member', $mem);
                    return $this->redirect('/member/profile');
                } else {
                    $err=__('Invalid email or password');
                }
            } else {
                $err=__('Invalid email or password');
            }
        }
        $this->set('err',$err);
        $this->titleLayout = __('Login');
    }
    /**
     * member register
     */
    public function memberRegister()
    {
        $member = $this->Members->newEntity();
        if ($this->request->is('post')) {
            $this->request->data['com_status'] = STATUS_UNAPPROVED;
            if($this->request->data['com_lang_chosen']) {
                $this->request->data['com_lang_chosen'] = implode(',',$this->request->data['com_lang_chosen']);
            }
            $member = $this->Core->patchEntity($member, $this->request->data,'Members');
            if(!$member->errors()) {
                $data = $member->toArray();
                if($data['business']) $data['business'] = implode(',',$data['business']);
                if($data['want_to_get']) $data['want_to_get'] = implode(',', $data['want_to_get']);
                $data['industries'][] =array('code' => $member->industry_code);
                $data['prefecture'] = $data['prefecture_code'];
                $response = $this->jcApi->insertMember($data);
                if(!isset($response['id'])) {
                    if(count($response) > 0) {
                        foreach ($response as $item) {
                            if(count($item) > 0) {
                                foreach ($item as $message) {
                                    $this->Flash->error($message);
                                }
                            }
                        }
                    }
                } else {
                    $member->id = $response['id'];
                    $member->password = Security::hash($member->password, 'sha1', true);
                    // level member default
                    $member->com_level = MEMBER_TYPE_MEMBER;
                    if ($this->Members->save($member)) {
                        $member->type_business = $this->TypeBusiness->find('list',['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage])->toArray();
                        $member->divisions = $this->JcApiModel->getList('divisions');
                        $member->industries = $this->JcApiModel->getList('industries');
                        $member->businesses = $this->JcApiModel->getList('businesses');
                        $member->created = date('d-m-Y', time());
                        $member->needs = $this->JcApiModel->getList('want-to-get');
                        $html= $this->renderView('Element/frontend/email/new_member', $member->toArray());
                        $entity = $this->EmailStacks->newEntity();
                        $emailStack = $this->EmailStacks->patchEntity($entity, [
                            'email' => $data['email'],
                            'content' => $html,
                            'subject' => __('Japan Circle - Register Member')
                        ]);

                        $this->EmailStacks->save($emailStack);


                        array_map('unlink', glob(CACHE.'api_member/*'));
                        $this->Flash->success(__('The member has been saved.'));
                        return $this->redirect(['action' => 'contact', true]);
                    } else {
                        $this->Flash->error(__('The member could not be saved. Please, try again.'));
                    }
                }
            } else {
                $this->Flash->error(__('The member could not be saved. Please, try again.'));
            }
        }

        $company_type = $this->TypeCompanies->find('list', ['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        foreach($countries as $code => $country) {
            $list_cities[$country] = array();
            foreach ($cities as $city) {
                if($code == $city['City']['country_code']) {
                    $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                }
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $divisions = $this->JcApiModel->getList('divisions');
        $type_business = $this->TypeBusiness->find('list',['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $businesses = $this->JcApiModel->getList('businesses');
        $needs = $this->JcApiModel->getList('want-to-get');
        $this->imageFields = $member->imageFields;
        $this->set(compact('member', 'businesses', 'needs', 'list_cities', 'industries', 'company_type', 'divisions', 'type_business'));
        $this->set('_serialize', ['member']);
        $this->titleLayout = __('Register');

    }
    /**
     * change member's password
     */
    public function changePassword()
    {
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null){
            return $this->redirect('/');
        }
        $tb='';
        $err='';
        if ($this->request->is('post')) {
            $crr_pw = Security::hash($this->request->data['current_password'], 'sha1', true);
            $newPw = Security::hash($this->request->data['new_password'], 'sha1', true);
            $rnewPw = Security::hash($this->request->data['renew_password'], 'sha1', true);
            if($newPw==$rnewPw){
                $idMem=$this->request->session()->read('Member')['id'];
                $mem = $this->Members->find()->where(['id' => $idMem, 'password' => $crr_pw])->first();
                if($mem){
                    $mem->password=$newPw;
                    if($this->Members->save($mem)){
                        $tb=__('Đổi mật khẩu thành công!');
                    }
                }else{
                    $err=__('Mật khẩu hiện tại không khớp!');
                }
            }else{
                $err=__('Mật khẩu mới không khớp nhau!');
            }
        }
        $this->set('tb',$tb);
        $this->set('err',$err);
        $this->titleLayout = __('Change Password');

    }
    /**
     * get password when forgot
     */
    public function memberForgotPassword()
    {
        if ($this->request->is('post')) {
            $email = $this->request->data('email');
            $memberByEmail = $this->jcApi->checkLogin($email);

            if ($memberByEmail) {

                $id = $memberByEmail['Member']['id'];
                $ent = $this->Members->get($id);
                $ent->code = Core::randomCode();
                $this->Members->save($ent);
                $html= $this->renderView('Element/frontend/email/forgot_password', [
                    'email' => $email,
                    'code' => $ent->code,
                    'name' => $memberByEmail['Member']['first_name'].' '.$memberByEmail['Member']['last_name']
                ]);

                $entity = $this->EmailStacks->newEntity();
                $emailStack = $this->EmailStacks->patchEntity($entity, [
                    'email' => $email,
                    'content' => $html,
                    'subject' => __('Japan Circle - Quên mật khẩu!')
                ]);

                $this->EmailStacks->save($emailStack);
                $this->render('sended_email_password');
            } else {
                $this->Flash->set(__('Email is not exist!'));
            }
        }
        $this->titleLayout = __('Forgot password');
    }

    public function resetPassword() {
        $code = $this->request->query('id');
        $member = $this->Members->find()->where(['code' => $code])->first();
        if (!$member) {
            throw new NotFoundException();
        }
        if ($this->request->is('post')) {
            $newPassword = Security::hash($this->request->data['password'], 'sha1', true);;

            $ent = $this->Members->get($member->id);
            $ent->password = $newPassword;
            $ent->code = null;
            $this->Members->save($ent);

            $memberByEmail = $this->jcApi->getMember($member->id);
            $html= $this->renderView('Element/frontend/email/changed_password', [
                'email' => $memberByEmail['Member']['email'],
                'password' => $this->request->data['password'],
                'name' => $memberByEmail['Member']['first_name'].' '.$memberByEmail['Member']['last_name']
            ]);
            $entity = $this->EmailStacks->newEntity();
            $emailStack = $this->EmailStacks->patchEntity($entity, [
                'email' => $memberByEmail['Member']['email'],
                'content' => $html,
                'subject' => __('Japan Circle - Đổi mật khẩu thành công !')
            ]);
            $this->EmailStacks->save($emailStack);

            $this->redirect(['action' => 'memberLogin']);
        }
        $this->set(compact('member'));
    }
    /**
     * member logout
     */
    public function memberLogout()
    {
        $this->request->session()->destroy();
        $this->redirect('/');
    }

    public function events() {
        $this->sidebarRight = true;

        $this->loadModel('Events');
        $events = $this->Events->find('all', [
            'order' => [
                'created' => 'desc'
            ]
        ]);
        if ($events) {
            $events = $events->toArray();
        }
        $title = __('Tạp chí theo tháng');
        $this->set(compact('events','title'));
        $this->titleLayout = __('Tạp chí theo tháng');
    }
    /**
     * display member's profile
     */
    public function memberProfile(){
        $member=$this->request->session()->read('Member');
        if($member == null) {
            return $this->redirect('/');
        }
        $dataMember = $this->Members->get($member->id,['contain' => 'TypeBusiness']);
        $dataMemberApi = $this->JcApiModel->getMember($member->id);
        $categoryIndustry = $this->JcApiModel->getDetailByCode('industries',$dataMemberApi['MemberIndustry'][0]['industry_code']);
        $typeBusiness = array();
        if($dataMember->type_busines) {
            $typeBusiness = $dataMember->type_busines->toArray();
        }
        $this->set(compact('dataMember','dataMemberApi','categoryIndustry','typeBusiness'));
        if($dataMember==null){
            return $this->redirect('/');
        }
        $this->titleLayout = __('Member Profile');
    }
    /**
     * display member's profile
     */
    public function memberUpdateProfile(){
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null) {
            return $this->redirect('/');
        }
        $id = $dataMember['id'];
        $member = $this->Members->get($id);
        $member->com_lang_chosen = explode(',', $member->com_lang_chosen);
        $data = $this->jcApi->getMember($id);
        foreach ($data['Member'] as $key => $val) {
            $member->$key = $val;
        }
        $member->industry_code = null;
        $member->prefecture_code = $member->prefecture;
        /*--- Set val business ---*/
        $member->business = explode(',', $member->business);
        $member->want_to_get = explode(',', $member->want_to_get);
        /*--- Set val business ---*/
        if($data['MemberIndustry']) {
            $member->industry_code = $data['MemberIndustry'][0]['industry_code'];
        }

        if ($this->request->is(['patch', 'post', 'put'])) {
            if($this->request->data['com_lang_chosen']) {
                $this->request->data['com_lang_chosen'] = implode(',',$this->request->data['com_lang_chosen']);
            }
            $member = $this->Core->patchEntity($member, $this->request->data,'Members');
            if(!$member->errors()) {
                $data = $member->toArray();
                $data['business'] = implode(',',$data['business']);
                $data['want_to_get'] = implode(',', $data['want_to_get']);
                $data['industries'][] = array('code' => $member->industry_code);
                $response = $this->jcApi->insertMember($data);
                if(!isset($response['id'])) {
                    $this->Flash->error(__('The member could not be saved. Please, try again.'));
                }
                else
                {

                    $member->id = $id;
                    if ($this->Members->save($member)) {
                        $memDetail = $this->jcApi->getMember($member->id);
                        array_map('unlink', glob(CACHE.'api_member/*'));
                        array_map('unlink', glob(CACHE.'api/*'));
                        $member = $this->Members->get($id);
                        $this->request->session()->write('Member', $member);
                        $this->request->session()->write('memberDetail', $memDetail);

                        $this->Flash->success(__('The member has been saved.'));
                        return $this->redirect(['action' => 'memberProfile']);
                    } else {
                        $this->Flash->error(__('The member could not be saved. Please, try again.'));
                    }
                }
            } else {
                $this->Flash->error(__('The member could not be saved. Please, try again.'));
            }
        }

        $company_type = $this->TypeCompanies->find('list', ['limit' => 200, 'valueField' => 'type_name_vie']);
        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        foreach($countries as $code => $country) {
            $list_cities[$country] = array();
            foreach ($cities as $city) {
                if($code == $city['City']['country_code']) {
                    $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                }
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $dividions = $this->JcApiModel->getList('divisions');
        $type_business = $this->TypeBusiness->find('list',['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $businesses = $this->JcApiModel->getList('businesses');
        $needs = $this->JcApiModel->getList('want-to-get');
        $this->imageFields = $member->imageFields;
        $this->set(compact('member', 'businesses', 'needs', 'list_cities', 'industries', 'company_type', 'dividions', 'type_business','ind'));
        $this->set('_serialize', ['member']);
        $this->titleLayout = __('Update member profile');
    }
    /**
     * member's product
     */
    public function memberProduct($page = 1){
        $dataMember=$this->request->session()->read('Member');
        if($dataMember==null){
            return $this->redirect('/');
        }

        $this->loadModel('Productions');
        $products = $this->Productions->find('all', [
            'conditions' => [
                'member_id' => $dataMember->id
            ],
            'order' => [
                'created' => 'desc'
            ],
            'limit' => 10,
            'page' => $page
        ]);
        $totalProducts = $this->Productions->find()->where(['member_id' => $dataMember->id])->count();
        $pageMax =ceil($totalProducts / 10);
        $this->set(compact('products','page','totalProducts','pageMax'));
        $this->titleLayout = __('Member productions');

    }

    public function deleteProduct()
    {
        $id = $this->request->query('id');
        $this->loadModel('Productions');
        $products = $this->Productions->find()->where(['id' => $id])->first();
        if (!$products || $products->member_id != $this->request->session()->read('Member.id')) {
            throw new NotFoundException();
        }
        $product = $this->Productions->get($id);
        if ($this->Productions->delete($product)) {
            @unlink(PATH_IMAGE_FILE.'Productions'.DS.$product->image);
            $this->redirect(['action' => 'memberProduct']);
        }
    }

    public function getListPrefecture()
    {
        $this->layout = false;
        $this->autoRender = false;
        $city_code = $this->request->query('data');
        $list = $this->JcApiModel->getListByCode('prefectures',$city_code);
        $message = '---'.__('Select District').'---';
        echo json_encode(array(
            'list' => $list,
            'message' => $message
        ));
    }

    public function listIndustries()
    {
        $this->layout = false;
        $this->autoRender = false;
        $industry_id = $this->request->query('data');
        $industries = $this->JcApiModel->getListData('industries');
        $list = array();
        foreach ($industries as $industry) {
            if($industry['Industry']['parent_id'] == $industry_id) {
                $list[$industry['Industry']['code']] = $industry['Industry']['name_vie'];
            }
        }
        $message = '---'.__('Select Industry').'---';
        echo json_encode(array(
            'list' => $list,
            'message' => $message
        ));
    }

    public function detailMember($id = null)
    {
        $this->sidebarRight = false;
        $member = $this->Members->get($id,[
            'conditions' => ['com_status' => STATUS_APPROVED],
            'contain' => ['Productions','CompanyInquiries']
        ]);
        $memberApi = $this->JcApiModel->getMember($id);
        $listIndustries = $this->JcApiModel->getList('industries');
        $this->set(compact('member','memberApi','listIndustries'));
        $this->titleLayout = __('Detail Member');
    }

    public function listMemberByCountries($country = null, $page = 1, $limit = 12)
    {
        $this->sidebarRight = false;
        $membersClients = $this->Members->find('all',[
            'conditions' => ['com_country' => $country, 'com_status' => STATUS_APPROVED],
            'contain' => ['Productions','CompanyInquiries'],
            'order' => ['created' => 'desc'],
            'limit' => $limit,
            'page' => $page
        ]);
        $count = $this->Members->find()->where([
            'com_country' => $country, 'com_status' => STATUS_APPROVED
        ])->limit($limit)->count();
        $listIds = array();
        $members = array();
        foreach($membersClients as $member) {
            $listIds[] = $member->id;
            $members[$member->id] = $member;
        }
        $pageMax =ceil($count / $limit);
        $memberApi = array();
        if($listIds) {
            $memberApi = $this->JcApiModel->getListData('members', 1, $limit, $listIds, $country);
        }
        $this->set(compact('members','memberApi','page','pageMax', 'country'));
        $this->titleLayout = __('List members by country');
    }

    public function registerInquiry($id = null)
    {
        $registerInquiry = $this->RegisterInquiries->newEntity();
        $registerInquiry->inquiry_id = $id;
        $dataMemberApi=$this->request->session()->read('memberDetail');
        $dataMember = $this->request->session()->read('Member');
        $inquiry = $this->Inquiries->get($id);
        if($dataMember) {
            $registerInquiry->member_id = $dataMember->id;
            $registerInquiry->company = $dataMemberApi['Member']['company'];
            $registerInquiry->address = $dataMember['address_'.$this->fieldLanguage];
            $registerInquiry->city_code = $dataMemberApi['Member']['city_code'];
            $registerInquiry->prefecture = $dataMemberApi['Member']['prefecture'];
            $registerInquiry->phone = $dataMemberApi['Member']['tel'];
            $registerInquiry->fax = $dataMemberApi['Member']['fax'];
            $registerInquiry->email = $dataMemberApi['Member']['email'];
            $registerInquiry->site_url = $dataMemberApi['Member']['site_url'];
            $registerInquiry->com_established = $dataMember->com_established;
            $registerInquiry->com_staff = $dataMember->com_staff;
            $registerInquiry->industry_code = $dataMemberApi['MemberIndustry'][0]['industry_code'];
            $registerInquiry->com_business = $dataMember['com_business_'.$this->fieldLanguage];
            $registerInquiry->com_inquiry = $dataMember['com_inquiry_'.$this->fieldLanguage];
            $registerInquiry->contact_person = $dataMemberApi['Member']['first_name'].' '.$dataMemberApi['Member']['last_name'];
            $registerInquiry->division_code = $dataMemberApi['Member']['division'];
            $registerInquiry->com_department = $dataMember['com_pic_department_'.$this->fieldLanguage];
            $registerInquiry->capital = $dataMember->com_capital;
        }
        if ($this->request->is('post')) {
            $registerInquiry = $this->RegisterInquiries->patchEntity($registerInquiry, $this->request->data);
            if ($this->RegisterInquiries->save($registerInquiry)) {
                $industries = $this->JcApiModel->getList('industries');
                $divisions = $this->JcApiModel->getList('divisions');
                $cities = $this->JcApiModel->getList('cities');
                $prefecture = $this->JcApiModel->getList('prefectures');
                $registerInquiry->address = $registerInquiry->address.' '.$prefecture[$registerInquiry->prefecture_code].' '.$cities[$registerInquiry->city_code];
                $registerInquiry->inquiry = $inquiry['title_'.$this->fieldLanguage];
                $registerInquiry->industry = $industries[$registerInquiry->industry_code];
                $registerInquiry->division = $divisions[$registerInquiry->division_code];
                $html= $this->renderView('Element/frontend/email/register_inquiry', $registerInquiry->toArray());
                $email = $this->EmailStacks->newEntity();
                $emailStack = $this->EmailStacks->patchEntity($email, [
                    'email' => $registerInquiry['email'],
                    'content' => $html,
                    'subject' => __('Japan Circle - Info.')
                ]);
                $this->EmailStacks->save($emailStack);
                $this->Flash->success(__('The register inquiry has been saved.'));
                return $this->redirect(['action' => 'contact', true]);
            } else {
                $this->Flash->error(__('The register inquiry could not be saved. Please, try again.'));
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $divisions = $this->JcApiModel->getList('divisions');

        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        foreach($countries as $code => $country) {
            $list_cities[$country] = array();
            foreach ($cities as $city) {
                if($code == $city['City']['country_code']) {
                    $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                }
            }
        }
        $this->set(compact('registerInquiry', 'members','inquiry', 'industries', 'divisions', 'list_cities'));
        $this->set('_serialize', ['registerInquiry']);
        $this->titleLayout = __('Register Inquiry');
    }

    public function imageCertificate($idMember) {
        $this->loadModel('jcApiModel');
        $member = $this->jcApiModel->getMember($idMember);
        if (!$member) {
            throw new NotFoundException();
        }
        $this->autoRender = false;
        $this->layout = false;

        $rImg = ImageCreateFromJPEG(WWW_ROOT.'img/certificate.jpg');

        $color = imagecolorallocate($rImg, 0, 0, 0);

        $name = $member['Member']['first_name'].' '.$member['Member']['last_name'];
        $day = date('d', strtotime($member['Member']['created']));
        $month = date('m', strtotime($member['Member']['created']));
        $year = date('Y', strtotime($member['Member']['created']));
        imagestring($rImg,300,165,485,urldecode($name),$color);
        imagestring($rImg,300,145,510,urldecode($day),$color);
        imagestring($rImg,300,185,510,urldecode($month),$color);
        imagestring($rImg,300,230,510,urldecode($year),$color);

        header('Content-type: image/jpeg');
        imagejpeg($rImg,NULL,100);
        imagedestroy($rImg);
    }


    public function registerSupporter()
    {
        $supporter = $this->Supporters->newEntity();
        if ($this->request->is('post')) {
            if($this->request->data['com_lang_chosen']) {
                $this->request->data['com_lang_chosen'] = implode(',',$this->request->data['com_lang_chosen']);
            }
            $supporter = $this->Core->patchEntity($supporter, $this->request->data,'Supporters');
            if ($this->Supporters->save($supporter)) {
                if($this->request->data['city_code']){
                    foreach($this->request->data['city_code'] as $item) {
                        $city_supporter = $this->SupporterCities->newEntity();
                        $city_supporter = $this->SupporterCities->patchEntity($city_supporter,array(
                            'city_code' => $item,
                            'supporter_id' => $supporter->id
                        ));
                        $this->SupporterCities->save($city_supporter);
                    }
                }

                $this->Flash->success(__('The supporter has been saved.'));
                return $this->redirect(['action' => 'contact', true]);

            } else {
                $this->Flash->error(__('The supporter could not be saved. Please, try again.'));
            }
        }
        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        foreach($countries as $code => $country) {
            $list_cities[$country] = array();
            foreach ($cities as $city) {
                if($code == $city['City']['country_code']) {
                    $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                }
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }

        $supporterCategories = $this->CategorySupporters->find('list',['valueField' => 'name_'.$this->fieldLanguage]);
        $this->imageFields = $supporter->imageFields;
        $this->set(compact('supporter', 'list_cities', 'industries', 'supporterCategories'));
    }

    public function listSupporters()
    {
        $this->sidebarRight = true;
        $this->paginate = [
            'contain' => ['CategorySupporters','SupporterCities'],
            'conditions' => ['Supporters.status' => STATUS_APPROVED],
        ];
        $supporters = $this->paginate($this->Supporters);
        $industries = $this->JcApiModel->getList('industries');
        $cities = $this->JcApiModel->getList('cities');
        $this->set(compact('supporters', 'industries', 'cities'));
        $this->titleLayout = __('List Supporter');
    }

    public function detailSupporter($id = null)
    {
        $this->sidebarRight = false;
        $supporter = $this->Supporters->get($id, [
            'conditions' => ['Supporters.status' => STATUS_APPROVED],
            'contain' => ['CategorySupporters', 'SupporterCities']
        ]);
        $supporter->com_lang_chosen = explode(',',$supporter->com_lang_chosen);
        $cities = $this->JcApiModel->getList('cities');
        $industries = $this->JcApiModel->getList('industries');
        $supporter->industry_code = $industries[$supporter->industry_code];
        $listCities = array();
        foreach($supporter->supporter_cities as $city) {
            $listCities[] = $cities[$city->city_code];
        }
        $supporter->city = implode(',',$listCities);
        $this->set('supporter', $supporter);
        $this->titleLayout = __('Detail Supporter');

    }
}
