<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\Event\Event;

/**
 * Inquiries Controller
 *
 * @property \Admin\Model\Table\InquiriesTable $Inquiries
 */
class InquiriesController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->titleLayout = __('Inquiry');
    }

    /**
     * Index method
     *
     * @return void
     */
    public function index()
    {
        $this->set('inquiries', $this->Inquiries->find('all',['order' => ['modified' => 'desc']]));
    }

    /**
     * View method
     *
     * @param string|null $id Inquiry id.
     * @return void
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function view($id = null)
    {
        $inquiry = $this->Inquiries->get($id, [
            'contain' => []
        ]);
        $this->set('inquiry', $inquiry);
        $this->set('_serialize', ['inquiry']);
    }

    /**
     * Add method
     *
     * @return void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $inquiry = $this->Inquiries->newEntity();
        if ($this->request->is('post')) {
            $inquiry = $this->Core->patchEntity($inquiry, $this->request->data, 'Admin.Inquiries');
            if ($this->Inquiries->save($inquiry)) {
                $this->Flash->success(__('The inquiry has been saved.'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The inquiry could not be saved. Please, try again.'));
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $this->imageFields = $inquiry->imageFields;
        $this->set(compact('inquiry','industries'));
        $this->set('_serialize', ['inquiry']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Inquiry id.
     * @return void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $inquiry = $this->Inquiries->get($id, [
            'contain' => []
        ]);
        if ($inquiry->date_start) {
            $inquiry->date_start = $inquiry->date_start->i18nFormat('YYYY-MM-dd');
        }
        if ($inquiry->date_end) {
            $inquiry->date_end = $inquiry->date_end->i18nFormat('YYYY-MM-dd');
        }
        if ($this->request->is(['patch', 'post', 'put'])) {
            $inquiry = $this->Core->patchEntity($inquiry, $this->request->data, 'Admin.Inquiries');
            if ($this->Inquiries->save($inquiry)) {
                $this->Flash->success(__('The inquiry has been saved.'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The inquiry could not be saved. Please, try again.'));
            }
        }
        $industryApi = $this->JcApiModel->getListData('industries');
        $industries = array();
        foreach($industryApi as $industry) {
            if($industry['Industry']['parent_id']) {
                $industries[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $this->imageFields = $inquiry->imageFields;
        $this->set(compact('inquiry','industries'));
        $this->set('_serialize', ['inquiry']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Inquiry id.
     * @return void Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function delete($id = null)
    {
        if($this->allowAccess == false) return;
        $this->request->allowMethod(['post', 'delete']);
        $inquiry = $this->Inquiries->get($id);
        if ($this->Inquiries->delete($inquiry)) {
            $this->Flash->success(__('The inquiry has been deleted.'));
        } else {
            $this->Flash->error(__('The inquiry could not be deleted. Please, try again.'));
        }
        return $this->redirect(['action' => 'index']);
    }
}
