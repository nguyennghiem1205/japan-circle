<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\Event\Event;

/**
 * Productions Controller
 *
 * @property \Admin\Model\Table\ProductionsTable $Productions
 */
class ProductionsController extends AppController
{

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->loadModel('JcApiModel');
        $this->titleLayout = __('Production');
    }

    /**
     * Index method
     *
     * @return void
     */
    public function index()
    {
        $this->paginate = [
            'contain' => ['Members'],
            'limit' => 9999999,
            'order' => ['Productions.modified' => 'desc']
        ];
        $this->set('productions', $this->paginate($this->Productions));
        $this->set('_serialize', ['productions']);
    }

    /**
     * View method
     *
     * @param string|null $id Production id.
     * @return void
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function view($id = null)
    {
        $production = $this->Productions->get($id, [
            'contain' => ['Members']
        ]);
        $industry = $this->JcApiModel->getDetailByCode('industries', $production->industry_code);
        $industry = $industry['name_'.$this->fieldLanguage];
        $this->set(compact('production','industry'));
        $this->set('_serialize', ['production']);
    }

//    /**
//     * Add method
//     *
//     * @return void Redirects on successful add, renders view otherwise.
//     */
//    public function add()
//    {
//        $production = $this->Productions->newEntity();
//        if ($this->request->is('post')) {
//            $production = $this->Core->patchEntity($production, $this->request->data, 'Admin.Productions');
//            if ($this->Productions->save($production)) {
//                $this->Flash->success(__('The production has been saved.'));
//                return $this->redirect(['action' => 'index']);
//            } else {
//                $this->Flash->error(__('The production could not be saved. Please, try again.'));
//            }
//        }
//        $members = $this->Productions->Members->find('list', ['limit' => 200]);
//        $industries = $this->JcApiModel->getList('industries');
//        $this->imageFields = $production->imageFields;
//        $this->set(compact('production', 'members','industries'));
//        $this->set('_serialize', ['production']);
//    }

    /**
     * Edit method
     *
     * @param string|null $id Production id.
     * @return void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $production = $this->Productions->get($id, [
            'contain' => []
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $production = $this->Core->patchEntity($production, $this->request->data, 'Admin.Productions');
            if ($this->Productions->save($production)) {
                $this->Flash->success(__('The production has been saved.'));
                return $this->redirect(['action' => 'index']);
            } else {
                $this->Flash->error(__('The production could not be saved. Please, try again.'));
            }
        }
        $industries = $this->JcApiModel->getList('industries');
        $member = $this->jcApi->getMember($production->member_id);
        $company = $member['Member']['company'];
        $this->imageFields = $production->imageFields;
        $this->set(compact('production', 'company','industries'));
        $this->set('_serialize', ['production']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Production id.
     * @return void Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function delete($id = null)
    {
        if($this->allowAccess == false) return;
        $this->request->allowMethod(['post', 'delete']);
        $production = $this->Productions->get($id);
        if ($this->Productions->delete($production)) {
            $this->Flash->success(__('The production has been deleted.'));
        } else {
            $this->Flash->error(__('The production could not be deleted. Please, try again.'));
        }
        return $this->redirect(['action' => 'index']);
    }
}
