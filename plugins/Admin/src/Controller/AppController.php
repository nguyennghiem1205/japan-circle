<?php

namespace Admin\Controller;

use App\Controller\AppController as BaseController;
use Cake\Cache\Cache;
use Cake\Core\Configure;
use Cake\Event\Event;

/**
 * @property bool|object Menus
 * @property bool layout
 * @property mixed titleLayout
 */
class AppController extends BaseController
{
    public $imageFields = [];

    public function initialize()
    {
        parent::initialize();
    }

    /**
     * Called before the controller action. You can use this method to configure and customize components
     * or perform logic that needs to happen before each controller action.
     *
     * @param Event $event An Event instance
     * @return void
     * @link http://book.cakephp.org/3.0/en/controllers.html#request-life-cycle-callbacks
     */

    public function beforeFilter(Event $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub
        if ($this->request->data) {
            Cache::drop('settingsFrontend');
            Cache::drop('menuParents');
            Cache::drop('subMenu');
        }
    }

    /**
     * Set field boolean
     *
     * @param string $field
     */
    public function set_active($field = 'status')
    {
        $this->layout = false;
        $this->autoRender = false;

        if($this->request->is('ajax')) {
            $model = $this->modelClass;
            if(!empty($this->request->params['plugin'])) {
                $model = str_replace($this->request->params['plugin'].'.', '', $model);
            }

            $entity = $this->$model->get($this->request->data['id']);
            $entity->$field =  $this->request->data[$field];
            $check = true;
            if($model == 'Members') {
                $response = $this->jcApi->updateStatus($entity->id, $entity->$field);
                if($entity->$field) {
                    $memberApi = $this->jcApi->getMember($entity->id);
                    $lang = explode(',',$entity->com_lang_chosen);
                    $this->sendMail($lang, $memberApi['Member']);
                }
                if($response != $entity->id) $check = false;
                array_map('unlink', glob(CACHE.'api_member/*'));
                array_map('unlink', glob(CACHE.'api/*'));
            }

            if($check) {
                if ($this->$model->save($entity)) {
                    echo json_encode(['status' => true]);
                }
            }

        }
    }

    /**
     * @param Event $event
     */
    public function beforeRender(Event $event)
    {
        $this->set('imageFields', $this->imageFields);
        parent::beforeRender($event); // TODO: Change the autogenerated stub
    }

    public function sendMail($lang, $member) {
        $element = 'Element/frontend/email/confirm_email_vie';
        $subject = 'Japan Circle - Thành viên được phê duyệt';
        if($lang) {
            if(in_array(MEMBER_LANGUAGE_VIETNAMESE, $lang)) {
                $element = 'Element/frontend/email/confirm_email_vie';
            } elseif (in_array(MEMBER_LANGUAGE_ENGLISH, $lang)) {
                $element = 'Element/frontend/email/confirm_email_eng';
                $subject = 'Japan Circle - Member Approved';
            } elseif (in_array(MEMBER_LANGUAGE_JAPANESE, $lang)) {
                $element = 'Element/frontend/email/confirm_email_jpn';
                $subject = '【ジャパンサークル】会員情報掲載のお知らせ。';
            }
        }
        $html = null;
        if($element) {
            $html= $this->renderView($element, $member);
        }
        $entity = $this->EmailStacks->newEntity();
        $emailStack = $this->EmailStacks->patchEntity($entity, [
            'email' => $member['email'],
            'content' => $html,
            'subject' => $subject
        ]);

        $this->EmailStacks->save($emailStack);
    }
}
