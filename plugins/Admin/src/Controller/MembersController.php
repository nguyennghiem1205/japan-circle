<?php
namespace Admin\Controller;

use Admin\Controller\AppController;
use Cake\Cache\Cache;
use Cake\Core\Configure;
use Cake\Event\Event;

/**
 * Members Controller
 *
 * @property \Admin\Model\Table\MembersTable $Members
 */
class MembersController extends AppController
{
    public function beforeFilter(Event $event)
    {
         parent::beforeFilter($event); // TODO: Change the autogenerated stub
        $this->loadModel('TypeCompanies');
        $this->loadModel('TypeBusiness');
        $this->loadModel('JcApiModel');
        $this->loadModel('EmailStacks');
        $this->loadModel('Productions');
        $this->loadModel('CompanyInquiries');
        $this->titleLayout = __('List of Member');
    }


    /**
     * Index method
     *
     * @return void
     */

    public function index()
    {
        $jcMembers = $this->JcApiModel->getListData('members', 1, 9999999);
        $this->set(compact('jcMembers'));
        $this->set('title',__('List of Member'));

        $this->set('_serialize', ['members']);
    }

    /**
     * View method
     *
     * @param string|null $id Member id.
     * @return void
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function view($id = null)
    {
        $member = $this->Members->get($id,[
            'contain' => ['TypeCompanies']
        ]);
        $member->com_lang_chosen = explode(',',$member->com_lang_chosen);
        $jcMember = $this->JcApiModel->getMember($id);
        $memberIndustry = $this->JcApiModel->getDetailByCode('industries',$jcMember['MemberIndustry'][0]['industry_code']);
        $industry = $memberIndustry['name_'.$this->fieldLanguage];
        $jcMember['Business'] = implode(',',$jcMember['Business']);
        $jcMember['WantToGet'] = implode(', ',$jcMember['WantToGet']);
        $this->set(compact('member','jcMember','industry'));
        $this->set('_serialize', ['member']);
    }

    /**
     * Add method
     *
     * @return void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $member = $this->Members->newEntity();
        if ($this->request->is('post')) {
            if($this->request->data['com_lang_chosen']) {
                $this->request->data['com_lang_chosen'] = implode(',',$this->request->data['com_lang_chosen']);
            }
            $member = $this->Core->patchEntity($member, $this->request->data,'Admin.Members');

            if(!$member->errors()) {
                $data = $member->toArray();
                $data['status_approve'] = $data['com_status'];
                $data['business'] = implode(',',$data['business']);
                $data['want_to_get'] = implode(',', $data['want_to_get']);
                $data['industries'][] =array('code' => $member->industry_code);
                $data['prefecture'] = $data['prefecture_code'];
                $response = $this->jcApi->insertMember($data);
                if(!isset($response['id'])) {
                    if(count($response) > 0) {
                        foreach ($response as $item) {
                            if(count($item) > 0) {
                                foreach ($item as $message) {
                                    $this->Flash->error($message);
                                }
                            }
                        }
                    }
                } else {
                    $member->id = $response['id'];
                    if ($this->Members->save($member)) {
                        array_map('unlink', glob(CACHE.'api_member/*'));
                        array_map('unlink', glob(CACHE.'api/*'));
                        $this->Flash->success(__('The member has been saved.'));
                        return $this->redirect(['action' => 'index']);
                    } else {
                        $this->Flash->error(__('The member could not be saved. Please, try again.'));
                    }
                }
            } else {
                $this->Flash->error(__('The member could not be saved. Please, try again.'));
            }
        }

        $company_type = $this->TypeCompanies->find('list', ['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        foreach($countries as $code => $country) {
            $list_cities[$country] = array();
            foreach ($cities as $city) {
                if($code == $city['City']['country_code']) {
                    $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                }
            }
        }
        $industries = $this->JcApiModel->getListData('industries');
        $industry_parents = array();
        foreach ($industries as $industry) {
            if(!$industry['Industry']['parent_id']) {
                $industry_parents[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $divisions = $this->JcApiModel->getList('divisions');
        $type_business = $this->TypeBusiness->find('list',['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $businesses = $this->JcApiModel->getList('businesses');
        $needs = $this->JcApiModel->getList('want-to-get');
        $this->imageFields = $member->imageFields;
        $this->set(compact('member', 'businesses', 'needs', 'list_cities', 'industry_parents', 'company_type', 'divisions', 'type_business'));
        $this->set('_serialize', ['member']);
    }

    /**
     * Edit method
     *
     * @param string|null $id Member id.
     * @return void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $member = $this->Members->get($id, [
            'contain' => []
        ]);
        $member->com_lang_chosen = explode(',', $member->com_lang_chosen);
        $data = $this->jcApi->getMember($id);
        foreach ($data['Member'] as $key => $val) {
            $member->$key = $val;
        }
        $member->industry_code = null;
        $member->prefecture_code = $member->prefecture;
        /*--- Set val business ---*/
        $member->business = explode(',', $member->business);
        $member->want_to_get = explode(',', $member->want_to_get);
        /*--- Set val business ---*/
        if($data['MemberIndustry']) {
            $member->industry_code = $data['MemberIndustry'][0]['industry_code'];
        }
        if ($this->request->is(['patch', 'post', 'put'])) {
            $lang = null;
            if($this->request->data['com_lang_chosen']) {
                $lang = $this->request->data['com_lang_chosen'];
                $this->request->data['com_lang_chosen'] = implode(',',$this->request->data['com_lang_chosen']);
            }
            $member = $this->Core->patchEntity($member, $this->request->data,'Admin.Members');
            if(!$member->errors()) {
                $data = $member->toArray();
                $data['status_approve'] = $data['com_status'];
                if($data['business']) {
                    $data['business'] = implode(',',$data['business']);
                }
                if($data['want_to_get']) {
                    $data['want_to_get'] = implode(',', $data['want_to_get']);
                }
                $data['industries'][] =array('code' => $member->industry_code);
                $response = $this->jcApi->insertMember($data);
                if(!isset($response['id'])) {
                    $this->Flash->error(__('The member could not be saved. Please, try again.'));
                } else {
                    $member->id = $response['id'];
                    if ($this->Members->save($member)) {
                        if($member->com_send_email && $member->com_status == STATUS_APPROVED) {
                            $element = 'Element/frontend/email/confirm_email_vie';
                            $subject = 'Japan Circle - Thành viên được phê duyệt';

                            if($lang) {
                                if(in_array(MEMBER_LANGUAGE_VIETNAMESE, $lang)) {
                                    $element = 'Element/frontend/email/confirm_email_vie';
                                } elseif (in_array(MEMBER_LANGUAGE_ENGLISH, $lang)) {
                                    $element = 'Element/frontend/email/confirm_email_eng';
                                    $subject = 'Japan Circle - Member Approved';
                                } elseif (in_array(MEMBER_LANGUAGE_JAPANESE, $lang)) {
                                    $element = 'Element/frontend/email/confirm_email_jpn';
                                    $subject = '【ジャパンサークル】会員情報掲載のお知らせ。';
                                }
                            }
                            $html = null;
                            if($element) {
                                $html= $this->renderView($element, $member->toArray());
                            }
                            $entity = $this->EmailStacks->newEntity();
                            $emailStack = $this->EmailStacks->patchEntity($entity, [
                                'email' => $data['email'],
                                'content' => $html,
                                'subject' => $subject
                            ]);

                            $this->EmailStacks->save($emailStack);
                        }
                        array_map('unlink', glob(CACHE.'api_member/*'));
                        array_map('unlink', glob(CACHE.'api/*'));
                        $this->Flash->success(__('The member has been saved.'));
                        return $this->redirect(['action' => 'index']);
                    } else {
                        $this->Flash->error(__('The member could not be saved. Please, try again.'));
                    }
                }
            } else {
                $this->Flash->error(__('The member could not be saved. Please, try again.'));
            }
        }

        $company_type = $this->TypeCompanies->find('list', ['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $cities = $this->JcApiModel->getListData('cities');
        $countries = $this->JcApiModel->getList('countries');
        $list_cities = array();
        if($countries) {
            foreach($countries as $code => $country) {
                $list_cities[$country] = array();
                foreach ($cities as $city) {
                    if($code == $city['City']['country_code']) {
                        $list_cities[$country][$city['City']['code']] = $city['City']['name_'.$this->fieldLanguage];
                    }
                }
            }
        }
        $industries = $this->JcApiModel->getListData('industries');
        $industry_parents = array();
        if($industries) {
            foreach($industries as $industry) {
                if(!$industry['Industry']['parent_id']) {
                    $industry_parents[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
                }
                if($industry['Industry']['code'] == $member->industry_code) {
                    $member->category_industry = $industry['Industry']['parent_id'];
                }
            }
        }

        $divisions = $this->JcApiModel->getList('divisions');
        $type_business = $this->TypeBusiness->find('list',['limit' => 200, 'valueField' => 'type_name_'.$this->fieldLanguage]);
        $businesses = $this->JcApiModel->getList('businesses');
        $needs = $this->JcApiModel->getList('want-to-get');
        $this->imageFields = $member->imageFields;
        $this->set(compact('member', 'businesses', 'needs', 'list_cities', 'industry_parents', 'company_type', 'divisions', 'type_business'));
        $this->set('_serialize', ['member']);
    }

    /**
     * Delete method
     *
     * @param string|null $id Member id.
     * @return void Redirects to index.
     * @throws \Cake\Network\Exception\NotFoundException When record not found.
     */
    public function delete($id = null)
    {
        if($this->allowAccess == false) return;
        $this->request->allowMethod(['post', 'delete']);
        $member = $this->Members->get($id,[
            'contain' => ['CompanyInquiries','Productions']
        ]);
        $data = $this->jcApi->deleteMember($id);
        if($data = $id) {
            if ($this->Members->delete($member)) {
                array_map('unlink', glob(CACHE.'api_member/*'));
                $this->Productions->deleteAll(array('member_id' => $id));
                $this->CompanyInquiries->deleteAll(array('member_id' => $id));
                $this->Flash->success(__('The member has been deleted.'));
            } else {
                $this->Flash->error(__('The member could not be deleted. Please, try again.'));
            }
        }
        return $this->redirect(['action' => 'index']);
    }

    public function getListPrefecture()
    {
        $this->layout = false;
        $this->autoRender = false;
        $city_code = $this->request->query('data');
        $list = $this->JcApiModel->getListByCode('prefectures',$city_code);
        $message = '---'.__('Select District').'---';
        echo json_encode(array(
            'list' => $list,
            'message' => $message
        ));
    }

    public function listIndustries()
    {
        $this->layout = false;
        $this->autoRender = false;
        $industry_id = $this->request->query('data');
        $industries = $this->JcApiModel->getListData('industries');
        $list = array();
        foreach ($industries as $industry) {
            if($industry['Industry']['parent_id'] == $industry_id) {
                $list[$industry['Industry']['code']] = $industry['Industry']['name_'.$this->fieldLanguage];
            }
        }
        $message = '---'.__('Select Industry').'---';
        echo json_encode(array(
            'list' => $list,
            'message' => $message
        ));
    }

    public function listMemberByCountries($country = null, $page = 1, $limit = 9999999)
    {
        $membersClients = $this->Members->find('all',[
            'conditions' => ['com_country' => $country],
            'order' => ['created' => 'desc'],
            'limit' => $limit,
            'page' => $page
        ]);
        $listIds = array();
        foreach($membersClients as $member) {
            $listIds[] = $member->id;
        }
        $jcMembers = array();
        if($listIds) {
            $jcMembers = $this->JcApiModel->getListData('members',1, $limit, $listIds);
        }
        ($country == MEMBER_COMPANY_COUNTRY_JAPAN)? $title = __('Japan'): $title = __('Viet Nam');
        $this->set(compact('jcMembers', 'title'));
        $this->render('index');
    }

    public function listMemberUnapproved()
    {
        $membersClients = $this->Members->find('all',[
            'conditions' => ['com_status' => STATUS_UNAPPROVED],
            'order' => ['created' => 'desc']
        ]);
        $listIds = array();
        foreach($membersClients as $member) {
            $listIds[] = $member->id;
        }
        $jcMembers = array();
        if($listIds) {
            $jcMembers = $this->JcApiModel->getListData('members',1, 99999, $listIds);
        }
        $title = __('Member Unapproved');
        $this->set(compact('jcMembers', 'title'));
        $this->render('index');
    }

    public function listMemberLevel($level = null)
    {
        $membersClients = $this->Members->find('all',[
            'conditions' => ['com_level' => $level],
            'order' => ['created' => 'desc']
        ]);
        $listIds = array();
        foreach($membersClients as $member) {
            $listIds[] = $member->id;
        }
        $jcMembers = array();
        if($listIds) {
            $jcMembers = $this->JcApiModel->getListData('members',1, 99999, $listIds);
        }
        ($level == MEMBER_TYPE_VIP)? $title = __('Vip'): $title = __('Member Default');
        $this->set(compact('jcMembers', 'title'));
        $this->render('index');
    }

}
